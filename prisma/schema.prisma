// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  userID    String   @id @unique @default(cuid())
  createdAt DateTime @default(now())

  userName                String
  profile_image           String      @default("")
  email                   String      @default("")
  posts                   Post[]
  post_upvotes            Post[]      @relation(name: "post_upvotes")
  replies                 Replies[]
  reply_upvotes           Replies[]   @relation(name: "reply_upvotes")
  courses                 Course[]
  moderated_courses       Course[]    @relation(name: "course_moderators")
  moderated_university    University? @relation(name: "university_moderators", fields: [moderated_university_id], references: [id])
  university              University? @relation(fields: [universityName], references: [name])
  universityName          String?
  moderator               Boolean     @default(false)
  professor               Boolean     @default(false)
  major                   String      @default("")
  minor                   String      @default("")
  moderated_university_id String?
}

model Replies {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content  String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
  user     User   @relation(fields: [authorId], references: [userID])
  authorId String

  user_upvotes User[] @relation(name: "reply_upvotes")
  upvotes      Int    @default(0)

  replies     Replies[] @relation("reply_replies")
  parentReply Replies?  @relation("reply_replies", references: [id], fields: [parentId])
  parentId    String?

  professor_approved Boolean @default(false)
}

model Tag {
  id String @id @default(cuid())

  tag   String @unique
  posts Post[] @relation("posts_tags")
  color String @default("#000000")
}

model Post {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  title              String?
  content            String?
  published          Boolean    @default(true)
  hidden             Boolean    @default(false)
  user               User       @relation(fields: [userId], references: [userID])
  userId             String
  course             Course     @relation(fields: [courseName], references: [name])
  courseName         String
  university         University @relation(fields: [universityName], references: [name])
  universityName     String
  upvotes            Int        @default(0)
  user_upvotes       User[]     @relation(name: "post_upvotes")
  replies            Replies[]
  tags               Tag[]      @relation("posts_tags")
  professor_approved Boolean    @default(false)
}

model Course {
  courseID  String   @id @default(uuid())
  createdAt DateTime @default(now())

  name              String      @unique
  private           Boolean     @default(false)
  approved          Boolean     @default(false)
  university        University  @relation(fields: [universityName], references: [name])
  universityName    String
  posts             Post[]
  users             User[]
  course_professors Professor[] @relation("course_professors")
  course_moderators User[]      @relation("course_moderators")
}

model University {
  id         String      @id @default(cuid())
  name       String      @unique
  courses    Course[]
  members    User[]
  posts      Post[]
  professors Professor[]
  moderators User[]      @relation("university_moderators")
}

model Professor {
  id   String @id @default(cuid())
  name String

  course_professors Course[]   @relation("course_professors")
  university        University @relation(fields: [universityName], references: [name])
  universityName    String
}
